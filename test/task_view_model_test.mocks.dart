// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_database_drift/test/task_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_database_drift/model/database.dart' as _i4;
import 'package:flutter_database_drift/repository/task_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.Task>> watchAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllTasks, []),
            returnValue: _i3.Stream<List<_i4.Task>>.empty(),
          )
          as _i3.Stream<List<_i4.Task>>);

  @override
  _i3.Future<int> addTask(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#addTask, [title]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> updateTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> deleteTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [task]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);
}
