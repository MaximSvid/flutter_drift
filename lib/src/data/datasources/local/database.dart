import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:flutter_database_drift/src/model/tasks.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

// This line is important for code generation. The file name must match.
part 'database.g.dart';



/// The main database class for the application.
/// It extends `_$AppDatabase` (generated by Drift) and manages all database operations.
@DriftDatabase(tables: [Tasks]) // Only Tasks table
class AppDatabase extends _$AppDatabase {
  /// Constructor for AppDatabase. Initializes the database connection.
  AppDatabase() : super(_openConnection());

  /// The schema version of the database. Used for migrations.
  @override
  int get schemaVersion => 1; // Back to version 1

  // Migration strategy (simple, for version 1)
  @override
  MigrationStrategy get migration => MigrationStrategy(
        onCreate: (Migrator m) {
          return m.createAll(); // Creates all tables when the database is first created
        },
        // No onUpgrade needed for schemaVersion 1
      );

  // --- Database Operations (Part of the Model) ---

  /// Watches and returns a stream of all tasks in the database.
  /// The UI can listen to this stream to reactively update when tasks change.
  Stream<List<Task>> watchAllTasks() => select(tasks).watch();

  /// Adds a new task to the database.
  /// [entry]: A `TasksCompanion` object containing the data for the new task.
  /// Returns the ID of the newly inserted task.
  Future<int> addTask(TasksCompanion entry) {
    return into(tasks).insert(entry);
  }

  /// Updates an existing task in the database.
  /// [entry]: The `Task` object with updated values. The `id` is used to identify the task.
  /// Returns true if the update was successful, false otherwise.
  Future<bool> updateTask(Task entry) {
    return update(tasks).replace(entry);
  }

  /// Deletes a task from the database.
  /// [entry]: The `Task` object to be deleted. The `id` is used to identify the task.
  /// Returns the number of rows deleted.
  Future<int> deleteTask(Task entry) {
    return delete(tasks).delete(entry);
  }
}

/// Helper function to open the database connection.
/// It determines the correct path for the database file on different platforms.
LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase(file);
  });
}
